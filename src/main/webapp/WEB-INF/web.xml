<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
                      http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1" metadata-complete="true">

    <!-- 如果是用mvn命令生成的xml，需要修改servlet版本为3.1 -->

  <display-name>ssm_shiro</display-name>
  <filter>
    <filter-name>shiroFilter</filter-name>
    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
      <!--设置true由servlet容器控制filter的生命周期-->
    <init-param>
      <param-name>targetFilterLifecycle</param-name>
      <param-value>true</param-value>
    </init-param>
    <!--设置spring容器filter的bean id，如果不设置则找与filter-name一致的bean-->
    <init-param>
      <param-name>targetBeanName</param-name>
      <param-value>shiroFilter</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>shiroFilter</filter-name>
    <!--代表访问springmvc【是springmvc的前端控制器的servlet的名字】这个Servlet时就启用shiro的认证和授权-->
    <servlet-name>springmvc</servlet-name>

  </filter-mapping>

  <!--shiro安全过滤器集成开始-->
  
  <!--shiro安全过滤器集成结束-->

  <!-- 配置springmvc前端控制器 -->
  <servlet>
    <servlet-name>springmvc</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <!--
        contextConfigLocation配置springmvc加载的配置文件
        配置处理器映射器、适配器等等
        如果不配置contextConfigLocation，默认加载的是/WEB-INF/spring-mvc-servlet.xml
      -->
      <!-- 配置springMVC需要加载的配置文件
        spring-dao.xml,spring-service.xml,spring-web.xml
        Mybatis - > spring -> springmvc
     -->
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>
          classpath:spring/spring-web.xml,
          classpath:mybatis/mybatis-config.xml
      </param-value>
    </init-param>
    <!-- 在classpath下的springmvc.xml配置处理器映射器 -->
  </servlet>

  <servlet-mapping>
    <servlet-name>springmvc</servlet-name>
    <!--
        第一种：*.action 访问以.action结尾由DispatcherSerevlet进行解析
        第二种:/ 所有访问的地址都由DispatcherServlet进行解析
        对于静态文件的解析需要配置不让DispatcherServlet进行解析
        第三种：/* 这样配置不对，使用这种配置 最终要转发到一个jsp页面时，
                仍然会由DispatcherServlet解析jsp地址，不能根据jsp页面找到handler，会报错
     -->
      <!-- 默认匹配所有的请求 -->
    <url-pattern>/</url-pattern>
  </servlet-mapping>

<!--  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.htm</welcome-file>
    <welcome-file>default.jsp</welcome-file>
  </welcome-file-list>-->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>
            classpath:spring/spring-dao.xml,
            classpath:spring/spring-service.xml,
            classpath:shiro/shiro.xml
        </param-value>
    </context-param>

    <!-- 配置spring的监听器开始-->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    <!--配置spring的监听器结束-->
</web-app>